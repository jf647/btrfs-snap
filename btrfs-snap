#!/bin/bash
#
# btrfs-snap - make periodic snapshots of btrfs filesystem
#
# Copyright (C) 2010 Birger Monsen birger@birger.sh
# Copyright (C) 2013 James FitzGibbon james@nadt.net
#
# This program is distributed under the GNU General Public License
# http://www.gnu.org/licenses/gpl.txt
#

LOG_FACILITY=local0
VERSION="1.1.0"
prog=${0##*/}

USAGE="Usage: ${prog} -h for usage help
       ${prog} -V for version
       ${prog} [options] <mountpoint> <prefix> <count>"
SYNOPSIS="${prog} [options] <mountpoint> <prefix> <count>
<mountpoint> is the mountpoint of the btrfs file system to make a
             snapshot of
<prefix>     is the prefix to be used in the name of the snapshot.
             E.g. hourly, daily, weekly...
             If prefix=VFS a Samba vfs_shadow_copy snapshot naming convention
             will be used (@GMT-%Y.%m.%d-%H.%M.%S).
<count>      The number of snapshots with the given prefix to keep.

btrfs-snap / hourly 24
would make a snapshot in /.snapshot called hourly_<date>_<time>
where <date> is on the form YYYY-MM-DD and <time> is on the form
HH:MM:SS. This format makes shure snapshot names sort correctly in
cronological order even when sorted alphabetically. The 24 newest
snapshots matching the prefix are kept around. The rest are deleted.

if '-r' is given, snapshots are created read only

if '-b dir' is given, snapshots are created rooted in dir, with a directory
structure that mimics the source.

Example usage for a system with 2 btrfs file systems mounted as
/ and /home (remember to make these scripts executable):

/etc/cron.hourly/btrfs-snap

#!/bin/bash
${0} / hourly 24
${0} /home hourly 24

/etc/cron.daily/btrfs-snap

#!/bin/bash
${0} / daily 7
${0} /home daily 7

/etc/cron.weekly/btrfs-snap

#!/bin/bash
${0} /home weekly 4"

base=""
readonly=""
while getopts "hVrb:" arg; do
	case "${arg}" in
		h )
			echo "$SYNOPSIS"
			exit 0
			;;
		r )
			readonly="-r"
			;;
		b )
			base=$OPTARG
			;;
		V )
			echo "${prog} Version ${VERSION}"
			exit 0
			;;
		* )
			echo "$USAGE"
			exit 1
			;;
	esac
done

shift $((OPTIND-1))

if [ $# -ne 3 ] ; then
	echo "$USAGE"
	exit 1
fi

# Remove trailing slash
mp=$(echo $1 | sed -e 's#/$##')
pf=$2
cnt=$(( $3+1 ))

mount -t btrfs | cut -d " " -f 3 | grep "^${mp}$" > /dev/null
if [ $? -ne 0 ] ; then
	echo "Error: ${mp} is not a btrfs mountpoint"
	exit 1
fi

if [ "x$base" == "x" ]
then
    base="${mp}/.snapshot"
else
    base="${base}/${mp}"
fi
if [ ! -d $base ]; then
	logger -p ${LOG_FACILITY}.info -t ${prog} "Creating $base"
	mkdir -p $base
fi
base=$(readlink -f $base)

if [ ${pf} == VFS ]; then
	nd='-'
	snapname=$(TZ=GMT date +@GMT-%Y.%m.%d-%H.%M.%S)
	pf='@GMT'
else
	nd='_'
	snapname=${pf}${nd}$(date +%Y-%m-%d_%H:%M:%S)
fi
out=`/sbin/btrfs subvol snapshot ${readonly} ${mp} ${base}/${snapname} 2>&1`
if [ $? -eq 0 ] ; then
	logger -p ${LOG_FACILITY}.info -t ${prog} "${out}"
else
	logger -p ${LOG_FACILITY}.err -t ${prog} "${out}"
fi

ls -dr $base/${pf}${nd}* | tail -n +${cnt} | while read snap ; do
	out=`/sbin/btrfs subvolume delete ${snap} 2>&1`
if [ $? -eq 0 ] ; then
	logger -p ${LOG_FACILITY}.info -t ${prog} "${out}"
else
	logger -p ${LOG_FACILITY}.err -t ${prog} "${out}"
fi
done
